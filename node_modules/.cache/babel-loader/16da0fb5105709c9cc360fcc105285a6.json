{"ast":null,"code":"var _jsxFileName = \"/Users/leifu/Documents/restaurantorder/src/Components/ContactData/ContactData.js\";\nimport React, { useState } from 'react';\nimport localServerAxios from \"axios\";\nimport Spinner from '../UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../axios-orders';\nimport Input from '../UI/Input/Input';\nimport Row from \"./prebuilt/Row\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport styled from \"@emotion/styled\";\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\n\nconst ContactData = props => {\n  const [orderForm, setOrderForm] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Your Name',\n        name: 'name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Street',\n        name: 'line1'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    city: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'City',\n        name: 'city'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    state: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'State',\n        name: 'state'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'ZIP Code',\n        name: 'zip'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5,\n        isNumeric: true\n      },\n      valid: false,\n      touched: false\n    },\n    phone: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Phone Number',\n        name: 'phone'\n      },\n      value: '',\n      validation: {\n        isNumeric: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Your E-Mail',\n        name: 'email'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: 'select',\n      elementConfig: {\n        options: [{\n          value: 'fastest',\n          displayValue: 'Fastest'\n        }, {\n          value: 'cheapest',\n          displayValue: 'Cheapest'\n        }],\n        name: 'deliveryMethod'\n      },\n      value: '',\n      validation: {},\n      valid: true\n    }\n  });\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  };\n\n  const inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = { ...orderForm\n    };\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n\n    for (let inputIdentifier in updatedOrderForm) {\n      //console.log(updatedOrderForm[inputIdentifier],updatedOrderForm[inputIdentifier].valid);\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    } //console.log('formIsValid',formIsValid);\n\n\n    setOrderForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n  };\n\n  const cardElementOptions = {\n    style: {\n      base: {\n        fontSize: \"16px\",\n        color: \"#9b9b9b\",\n        \"::placeholder\": {\n          color: \"#9b9b9b\"\n        }\n      },\n      invalid: {\n        color: '#aa272f',\n        iconColor: '#aa272f'\n      }\n    },\n    hidePostalCode: true\n  };\n  const CardElementContainer = styled.div`\n        height: 40px;\n        display: flex;\n        align-items: center;\n    \n        & .StripeElement {\n        width: 100%;\n        padding: 10px;\n        }\n    `;\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleFormSubmit = async ev => {\n    ev.preventDefault();\n    ev.persist(); //submitHandler\n    // setIsProcessing(true);\n\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.line1.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n    const cardElement = elements.getElement(CardElement);\n    const res = await localServerAxios.post('https://us-central1-restrauntordermenu.cloudfunctions.net/api/pay', {\n      amount: (props.totalPrice * 100).toFixed(0),\n      billingDetails: billingDetails\n    }); // const res = await localServerAxios.post('http://localhost:8585/pay', {\n    //     amount: (props.totalPrice*100).toFixed(0), \n    //     billingDetails: billingDetails,\n    //     })\n\n    const clientSecret = res.data['client_secret'];\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardElement,\n        billing_details: billingDetails\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        console.log('Money is in the bank!'); //orderHandler\n\n        setLoading(true);\n        const formData = {};\n\n        for (let formElementIdentifier in orderForm) {\n          formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n        }\n\n        let updateDishes = { ...props.dishes\n        };\n        Object.keys(updateDishes).forEach(key => (updateDishes[key] === 0 || null) && delete updateDishes[key]);\n        const order = {\n          dishes: updateDishes,\n          price: props.totalPrice,\n          orderData: formData\n        };\n        await axios.post('/orders.json', order).then(response => {\n          console.log('toFirebase success');\n          props.onSuccessfulCheckout();\n        }).catch(error => {\n          setLoading(false);\n        });\n      }\n    }\n  };\n\n  const formElementsArray = [];\n\n  for (let key in orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: orderForm[key]\n    });\n  }\n\n  let form = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }\n  }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CardElementContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    options: cardElementOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SubmitButton, {\n    disabled: isProcessing || !formIsValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 21\n    }\n  }, isProcessing ? \"Processing...\" : `Pay $${props.totalPrice}`)), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SubmitButton, {\n    style: {\n      backgroundColor: '#333',\n      borderColor: '#333'\n    },\n    onClick: props.goBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 21\n    }\n  }, \"Cancle\"))));\n\n  if (loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.ContactData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }\n  }, \"Enter your Contact Data & Pay\"), form);\n};\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/leifu/Documents/restaurantorder/src/Components/ContactData/ContactData.js"],"names":["React","useState","localServerAxios","Spinner","classes","axios","Input","Row","SubmitButton","styled","CardElement","useElements","useStripe","ContactData","props","orderForm","setOrderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","city","state","zipCode","minLength","maxLength","isNumeric","phone","email","isEmail","deliveryMethod","options","displayValue","formIsValid","setFormIsValid","loading","setLoading","isProcessing","setIsProcessing","checkValidity","rules","isValid","trim","length","pattern","test","inputChangedHandler","event","inputIdentifier","updatedOrderForm","updatedFormElement","target","cardElementOptions","style","base","fontSize","color","invalid","iconColor","hidePostalCode","CardElementContainer","div","stripe","elements","handleFormSubmit","ev","preventDefault","persist","billingDetails","address","line1","postal_code","zip","cardElement","getElement","res","post","amount","totalPrice","toFixed","clientSecret","data","result","confirmCardPayment","payment_method","card","billing_details","error","console","log","message","paymentIntent","status","formData","formElementIdentifier","updateDishes","dishes","Object","keys","forEach","key","order","price","orderData","then","response","onSuccessfulCheckout","catch","formElementsArray","push","id","config","form","map","formElement","backgroundColor","borderColor","goBack"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport localServerAxios from \"axios\";\nimport Spinner from '../UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../axios-orders';\nimport Input from '../UI/Input/Input';\nimport Row from \"./prebuilt/Row\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport styled from \"@emotion/styled\";\nimport {CardElement, useElements, useStripe} from '@stripe/react-stripe-js';\n\nconst ContactData = (props) => {\n  const [orderForm, setOrderForm] = useState (\n      {\n        name: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your Name',\n                name: 'name'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        street: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Street',\n                name: 'line1'\n\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n       \n        city: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'City',\n                name: 'city'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        state: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'State',\n                name: 'state'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        zipCode: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'ZIP Code',\n                name: 'zip'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 5,\n                maxLength: 5,\n                isNumeric: true\n            },\n            valid: false,\n            touched: false\n        },\n        phone: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Phone Number',\n                name: 'phone'\n            },\n            value: '',\n            validation: {\n                isNumeric: true\n            },\n            valid: false,\n            touched: false\n        },\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'email',\n                placeholder: 'Your E-Mail',\n                name:'email'\n            },\n            value: '',\n            validation: {\n                required: true,\n                isEmail: true\n            },\n            valid: false,\n            touched: false\n        },\n        deliveryMethod: {\n            elementType: 'select',\n            elementConfig: {\n                options: [\n                    {value: 'fastest', displayValue: 'Fastest'},\n                    {value: 'cheapest', displayValue: 'Cheapest'}\n                ],\n                name:'deliveryMethod'\n            },\n            value: '',\n            validation: {},\n            valid: true\n        }\n    }) \n        const [formIsValid, setFormIsValid] = useState(false);\n        const [loading, setLoading] = useState(false);\n        const [isProcessing, setIsProcessing] = useState(false);\n    \n    const checkValidity = (value, rules) => {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    const inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...orderForm\n        };\n        const updatedFormElement = { \n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            //console.log(updatedOrderForm[inputIdentifier],updatedOrderForm[inputIdentifier].valid);\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        //console.log('formIsValid',formIsValid);\n        setOrderForm(updatedOrderForm); \n        setFormIsValid(formIsValid);\n    }\n    \n  \n    const cardElementOptions = {\n        style: {\n            base: {\n                fontSize: \"16px\",\n                color: \"#9b9b9b\",\n                \"::placeholder\": {\n                    color: \"#9b9b9b\"\n                }\n\n            },\n            invalid: {\n                color: '#aa272f',\n                iconColor: '#aa272f',\n            }   \n        },\n        hidePostalCode: true,\n    }\n\n\n\n    const CardElementContainer = styled.div`\n        height: 40px;\n        display: flex;\n        align-items: center;\n    \n        & .StripeElement {\n        width: 100%;\n        padding: 10px;\n        }\n    `;\n    \n    const stripe = useStripe();\n    const elements = useElements();\n\n    const handleFormSubmit = async ev => {\n        ev.preventDefault();\n        ev.persist()\n        \n        //submitHandler\n        // setIsProcessing(true);\n        const billingDetails = {\n            name: ev.target.name.value,\n            email: ev.target.email.value,\n            address: {\n            city: ev.target.city.value,\n            line1: ev.target.line1.value,\n            state: ev.target.state.value,\n            postal_code: ev.target.zip.value\n            }\n        }\n        \n        const cardElement = elements.getElement(CardElement);\n       \n        const res = await localServerAxios.post('https://us-central1-restrauntordermenu.cloudfunctions.net/api/pay', {\n        amount: (props.totalPrice*100).toFixed(0), \n        billingDetails: billingDetails,\n        })\n\n        // const res = await localServerAxios.post('http://localhost:8585/pay', {\n        //     amount: (props.totalPrice*100).toFixed(0), \n        //     billingDetails: billingDetails,\n        //     })\n        const clientSecret = res.data['client_secret'];\n        const result = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n              card: cardElement,\n              billing_details: billingDetails\n            },\n          });\n\n          if (result.error) {\n            // Show error to your customer (e.g., insufficient funds)\n            console.log(result.error.message);\n          } else {\n            // The payment has been processed!\n            if (result.paymentIntent.status === 'succeeded') {\n              console.log('Money is in the bank!');\n               //orderHandler\n        setLoading(true);\n        const formData = {};\n        for (let formElementIdentifier in orderForm) {\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n        }\n        let updateDishes = {...props.dishes};\n        Object.keys(updateDishes).forEach((key) => (updateDishes[key] === 0||null) && delete updateDishes[key]);\n\n        const order = {\n            dishes: updateDishes,\n            price: props.totalPrice,\n            orderData: formData\n        }\n        await axios.post( '/orders.json', order )\n            .then( response => {\n               console.log('toFirebase success')\n               props.onSuccessfulCheckout();\n            } )\n            .catch( error => {\n                setLoading(false);\n            } );\n\n            }\n          }\n\n        };\n\n\n    const formElementsArray = [];\n    for (let key in orderForm) {\n        formElementsArray.push({\n            id: key,\n            config: orderForm[key]\n        });\n    }\n    let form = (\n        <div>\n        <form onSubmit={handleFormSubmit}>\n            {formElementsArray.map(formElement => (\n                <Input \n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => inputChangedHandler(event, formElement.id)} />\n            ))}\n                <Row>\n                    <CardElementContainer>\n                    <CardElement options={cardElementOptions}/>\n                    </CardElementContainer>\n                </Row>\n\n                <Row>\n                    <SubmitButton disabled={isProcessing||!formIsValid}>\n                    {isProcessing ? \"Processing...\" : `Pay $${props.totalPrice}`}\n                    </SubmitButton>\n                </Row>\n\n                <Row>\n                    <SubmitButton  style={{ backgroundColor: '#333', borderColor:'#333' }} onClick = {props.goBack}>Cancle</SubmitButton>\n                </Row>\n\n             </form>      \n           </div>\n       \n    );\n    if ( loading ) {\n        form = <Spinner />;\n    }\n        \n    return (\n        <div className={classes.ContactData}>\n            <h4>Enter your Contact Data & Pay</h4>\n            {form}\n        </div>\n    );\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}