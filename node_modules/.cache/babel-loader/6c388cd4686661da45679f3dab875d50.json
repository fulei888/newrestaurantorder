{"ast":null,"code":"var _jsxFileName = \"/Users/leifu/Documents/restaurantorder/src/Components/ContactData/ContactData.js\";\nimport React, { useState } from 'react';\nimport localServerAxios from \"axios\";\nimport Button from '../UI/Button/Button';\nimport Spinner from '../UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../axios-orders';\nimport Input from '../UI/Input/Input';\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\nimport styled from \"@emotion/styled\";\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js'; // import {Route} from 'react-router-dom';\n// import EndPage from '../EndPage/EndePage';\n\nconst ContactData = props => {\n  const [orderForm, setOrderForm] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Your Name',\n        name: 'name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Street',\n        name: 'line1'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'ZIP Code',\n        name: 'zip'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5,\n        isNumeric: true\n      },\n      valid: false,\n      touched: false\n    },\n    city: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'City',\n        name: 'city'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    state: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'State',\n        name: 'state'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    phone: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Phone Number',\n        name: 'phone'\n      },\n      value: '',\n      validation: {\n        isNumeric: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Your E-Mail',\n        name: 'email'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: 'select',\n      elementConfig: {\n        options: [{\n          value: 'fastest',\n          displayValue: 'Fastest'\n        }, {\n          value: 'cheapest',\n          displayValue: 'Cheapest'\n        }],\n        name: 'deliveryMethod'\n      },\n      value: '',\n      validation: {},\n      valid: true\n    }\n  });\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n\n  const orderHandler = event => {//     event.preventDefault();\n    //     setLoading(true);\n    //     const formData = {};\n    //     for (let formElementIdentifier in orderForm) {\n    //         formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    //     }\n    //     let updateDishes = {...props.dishes};\n    //     Object.keys(updateDishes).forEach((key) => (updateDishes[key] === 0||null) && delete updateDishes[key]);\n    //     console.log('dishes', updateDishes);\n    //     const order = {\n    //         dishes: updateDishes,\n    //         price: props.totalPrice,\n    //         orderData: formData\n    //     }\n    //     axios.post( '/orders.json', order )\n    //         .then( response => {\n    //             setLoading(false);\n    //             props.history.replace( '/endpage' );\n    //             console.log('props.match.path'+props.match.path)\n    //         } )\n    //         .catch( error => {\n    //             setLoading(false);\n    //         } );\n  };\n\n  const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  };\n\n  const inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = { ...orderForm\n    };\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n\n    for (let inputIdentifier in updatedOrderForm) {\n      console.log(updatedOrderForm[inputIdentifier], updatedOrderForm[inputIdentifier].valid);\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    console.log('formIsValid', formIsValid);\n    setOrderForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n  };\n\n  const cardElementOptions = {\n    style: {\n      base: {\n        fontSize: \"16px\",\n        color: \"#fff\",\n        \"::placeholder\": {\n          color: \"#87bbfd\"\n        }\n      },\n      invalid: {\n        color: '#FFC7EE',\n        iconColor: '#FFC7EE'\n      }\n    },\n    hidePostalCode: true\n  };\n  const CardElementContainer = styled.div`\n        height: 40px;\n        display: flex;\n        align-items: center;\n    \n        & .StripeElement {\n        width: 100%;\n        padding: 15px;\n        }\n    `;\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleFormSubmit = async ev => {\n    ev.preventDefault(); //orderHandler\n\n    setLoading(true);\n    const formData = {};\n\n    for (let formElementIdentifier in orderForm) {\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    }\n\n    let updateDishes = { ...props.dishes\n    };\n    Object.keys(updateDishes).forEach(key => (updateDishes[key] === 0 || null) && delete updateDishes[key]);\n    console.log('dishes', updateDishes);\n    const order = {\n      dishes: updateDishes,\n      price: props.totalPrice,\n      orderData: formData\n    };\n    axios.post('/orders.json', order).then(response => {\n      console.log('orders  is up');\n      console.log('props.match.path' + props.match.path);\n    }).catch(error => {\n      setLoading(false);\n    }); //submitHandler\n\n    console.log('event', ev.target);\n    const billingDetails = {\n      name: ev.target.name.value,\n      email: ev.target.email.value,\n      address: {\n        city: ev.target.city.value,\n        line1: ev.target.line1.value,\n        state: ev.target.state.value,\n        postal_code: ev.target.zip.value\n      }\n    };\n    const cardElement = elements.getElement(CardElement); // console.log('cardElement',cardElement);\n    // const paymentMethodReq = await stripe.createPaymentMethod({\n    //     type: 'card',\n    //     card: cardElement,\n    //     billing_details: billingDetails\n    // });\n    // console.log('paymentMethodReq',paymentMethodReq.paymentMethod.id);\n    // const payId = paymentMethodReq.paymentMethod.id;\n\n    const res = await localServerAxios.post('http://localhost:8383/pay', {\n      amount: props.totalPrice * 100,\n      billingDetails: billingDetails\n    }); // setIsProcessing(true);\n\n    const clientSecret = res.data['client_secret'];\n    console.log('clientSecret', clientSecret); // console.log('billingDetails',billingDetails);\n\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardElement,\n        billing_details: billingDetails\n      }\n    });\n    setIsProcessing(true); //   const result = await stripe.confirmCardPayment(clientSecret, {\n    //     payment_method: paymentMethodReq.paymentMethod.id\n    //   });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      setLoading(false);\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        console.log('Money is in the bank!');\n        setLoading(false);\n        props.onSuccessfulCheckout(); // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  const formElementsArray = [];\n\n  for (let key in orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: orderForm[key]\n    });\n  }\n\n  let form = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }\n  }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(CardElementContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    options: cardElementOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SubmitButton, {\n    disabled: isProcessing || !formIsValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 21\n    }\n  }, isProcessing ? \"Processing...\" : `Pay $${props.totalPrice}`))), /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Danger\",\n    clicked: props.goBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 14\n    }\n  }, \"BACK\"), /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    clicked: orderHandler,\n    disabled: !formIsValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 13\n    }\n  }, \"ORDER\"));\n\n  if (loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.ContactData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 17\n    }\n  }, \"Enter your Contact Data\"), form);\n};\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/leifu/Documents/restaurantorder/src/Components/ContactData/ContactData.js"],"names":["React","useState","localServerAxios","Button","Spinner","classes","axios","Input","Row","BillingDetailsFields","SubmitButton","CheckoutError","styled","CardElement","useElements","useStripe","ContactData","props","orderForm","setOrderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","city","state","phone","email","isEmail","deliveryMethod","options","displayValue","formIsValid","setFormIsValid","loading","setLoading","isProcessing","setIsProcessing","checkoutError","setCheckoutError","orderHandler","event","checkValidity","rules","isValid","trim","length","pattern","test","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","console","log","cardElementOptions","style","base","fontSize","color","invalid","iconColor","hidePostalCode","CardElementContainer","div","stripe","elements","handleFormSubmit","ev","preventDefault","formData","formElementIdentifier","updateDishes","dishes","Object","keys","forEach","key","order","price","totalPrice","orderData","post","then","response","match","path","catch","error","billingDetails","address","line1","postal_code","zip","cardElement","getElement","res","amount","clientSecret","data","result","confirmCardPayment","payment_method","card","billing_details","message","paymentIntent","status","onSuccessfulCheckout","formElementsArray","push","id","config","form","map","formElement","goBack"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport localServerAxios from \"axios\";\nimport Button from '../UI/Button/Button'\nimport Spinner from '../UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../axios-orders';\nimport Input from '../UI/Input/Input';\n\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\nimport styled from \"@emotion/styled\";\nimport {CardElement, useElements, useStripe} from '@stripe/react-stripe-js';\n// import {Route} from 'react-router-dom';\n// import EndPage from '../EndPage/EndePage';\nconst ContactData = (props) => {\n  const [orderForm, setOrderForm] = useState (\n      {\n        name: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your Name',\n                name: 'name'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        street: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Street',\n                name: 'line1'\n\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        zipCode: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'ZIP Code',\n                name: 'zip'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 5,\n                maxLength: 5,\n                isNumeric: true\n            },\n            valid: false,\n            touched: false\n        },\n        city: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'City',\n                name: 'city'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        state: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'State',\n                name: 'state'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        phone: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Phone Number',\n                name: 'phone'\n            },\n            value: '',\n            validation: {\n                isNumeric: true\n            },\n            valid: false,\n            touched: false\n        },\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'email',\n                placeholder: 'Your E-Mail',\n                name:'email'\n            },\n            value: '',\n            validation: {\n                required: true,\n                isEmail: true\n            },\n            valid: false,\n            touched: false\n        },\n        deliveryMethod: {\n            elementType: 'select',\n            elementConfig: {\n                options: [\n                    {value: 'fastest', displayValue: 'Fastest'},\n                    {value: 'cheapest', displayValue: 'Cheapest'}\n                ],\n                name:'deliveryMethod'\n            },\n            value: '',\n            validation: {},\n            valid: true\n        }\n    }\n  ) \n        const [formIsValid, setFormIsValid] = useState(false);\n        const [loading, setLoading] = useState(false);\n        const [isProcessing, setIsProcessing] = useState(false);\n        const [checkoutError, setCheckoutError] = useState();\n     \n\n     const orderHandler = ( event ) => {\n       \n    //     event.preventDefault();\n    //     setLoading(true);\n    //     const formData = {};\n    //     for (let formElementIdentifier in orderForm) {\n    //         formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    //     }\n    //     let updateDishes = {...props.dishes};\n    //     Object.keys(updateDishes).forEach((key) => (updateDishes[key] === 0||null) && delete updateDishes[key]);\n    //     console.log('dishes', updateDishes);\n    //     const order = {\n    //         dishes: updateDishes,\n    //         price: props.totalPrice,\n    //         orderData: formData\n    //     }\n    //     axios.post( '/orders.json', order )\n    //         .then( response => {\n    //             setLoading(false);\n    //             props.history.replace( '/endpage' );\n    //             console.log('props.match.path'+props.match.path)\n    //         } )\n    //         .catch( error => {\n    //             setLoading(false);\n    //         } );\n     }\n\n    const checkValidity = (value, rules) => {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n   const inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...orderForm\n        };\n        const updatedFormElement = { \n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            console.log(updatedOrderForm[inputIdentifier],updatedOrderForm[inputIdentifier].valid);\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        console.log('formIsValid',formIsValid);\n        setOrderForm(updatedOrderForm); \n        setFormIsValid(formIsValid);\n    }\n    \n\n        \n    const cardElementOptions = {\n        style: {\n            base: {\n                fontSize: \"16px\",\n                color: \"#fff\",\n                \"::placeholder\": {\n                    color: \"#87bbfd\"\n                }\n\n            },\n            invalid: {\n                color: '#FFC7EE',\n                iconColor: '#FFC7EE'\n            }   \n        },\n        hidePostalCode: true,\n    }\n\n\n\n        const CardElementContainer = styled.div`\n        height: 40px;\n        display: flex;\n        align-items: center;\n    \n        & .StripeElement {\n        width: 100%;\n        padding: 15px;\n        }\n    `;\n    \n       const stripe = useStripe();\n       const elements = useElements();\n\n       const handleFormSubmit = async ev => {\n        ev.preventDefault();\n\n        //orderHandler\n        setLoading(true);\n        const formData = {};\n        for (let formElementIdentifier in orderForm) {\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n        }\n        let updateDishes = {...props.dishes};\n        Object.keys(updateDishes).forEach((key) => (updateDishes[key] === 0||null) && delete updateDishes[key]);\n        console.log('dishes', updateDishes);\n        const order = {\n            dishes: updateDishes,\n            price: props.totalPrice,\n            orderData: formData\n        }\n        axios.post( '/orders.json', order )\n            .then( response => {\n                console.log('orders  is up')\n                console.log('props.match.path'+props.match.path)\n            } )\n            .catch( error => {\n                setLoading(false);\n            } );\n\n        //submitHandler\n\n        console.log('event', ev.target);\n        const billingDetails = {\n            name: ev.target.name.value,\n            email: ev.target.email.value,\n            address: {\n            city: ev.target.city.value,\n            line1: ev.target.line1.value,\n            state: ev.target.state.value,\n            postal_code: ev.target.zip.value\n            }\n        }\n        \n        const cardElement = elements.getElement(CardElement);\n        // console.log('cardElement',cardElement);\n        // const paymentMethodReq = await stripe.createPaymentMethod({\n        //     type: 'card',\n        //     card: cardElement,\n        //     billing_details: billingDetails\n        // });\n       // console.log('paymentMethodReq',paymentMethodReq.paymentMethod.id);\n       // const payId = paymentMethodReq.paymentMethod.id;\n        const res = await localServerAxios.post('http://localhost:8383/pay', {\n        amount: props.totalPrice*100, \n        billingDetails: billingDetails,\n        });\n\n        // setIsProcessing(true);\n        const clientSecret = res.data['client_secret'];\n        console.log('clientSecret',clientSecret);\n        \n        // console.log('billingDetails',billingDetails);\n\n        const result = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n              card: cardElement,\n              billing_details: billingDetails\n            },\n          });\n        setIsProcessing(true);\n        //   const result = await stripe.confirmCardPayment(clientSecret, {\n        //     payment_method: paymentMethodReq.paymentMethod.id\n        //   });\n          if (result.error) {\n            // Show error to your customer (e.g., insufficient funds)\n            setLoading(false);\n            console.log(result.error.message);\n          } else {\n            // The payment has been processed!\n            if (result.paymentIntent.status === 'succeeded') {\n              console.log('Money is in the bank!');\n              setLoading(false);\n              props.onSuccessfulCheckout();\n              // Show a success message to your customer\n              // There's a risk of the customer closing the window before callback\n              // execution. Set up a webhook or plugin to listen for the\n              // payment_intent.succeeded event that handles any business critical\n              // post-payment actions.\n            }\n          }\n\n        };\n\n\n    const formElementsArray = [];\n    for (let key in orderForm) {\n        formElementsArray.push({\n            id: key,\n            config: orderForm[key]\n        });\n    }\n    let form = (\n        <div>\n        <form onSubmit={handleFormSubmit}>\n            {formElementsArray.map(formElement => (\n                <Input \n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => inputChangedHandler(event, formElement.id)} />\n            ))}\n             <Row>\n                    <CardElementContainer>\n                    <CardElement options={cardElementOptions}/>\n                    </CardElementContainer>\n                </Row>\n                <Row>\n                    <SubmitButton disabled={isProcessing||!formIsValid}>\n                    {isProcessing ? \"Processing...\" : `Pay $${props.totalPrice}`}\n                    </SubmitButton>\n                </Row>\n             </form>\n             <Button btnType=\"Danger\" clicked = {props.goBack}>BACK</Button>\n            <Button btnType=\"Success\" clicked = {orderHandler} disabled={!formIsValid}>ORDER</Button>\n            \n            {/* <Route\n                path={props.match.path + 'endpage'}\n                render={(props)=>(<EndPage\n                    {...props} />)} \n            /> */}\n           </div>\n       \n    );\n    if ( loading ) {\n        form = <Spinner />;\n    }\n        \n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n                {/* <form onSubmit={handleFormSubmit}>\n                    <Row>\n                        <BillingDetailsFields />\n                    </Row>\n                    <Row>\n                        <CardElementContainer>\n                        <CardElement options={cardElementOptions}/>\n                        </CardElementContainer>\n                    </Row>\n                    {checkoutError && <CheckoutError>{checkoutError}</CheckoutError>}\n                    <Row>\n                        <SubmitButton disabled={isProcessing}>\n                        {isProcessing ? \"Processing...\" : `Pay $${props.price}`}\n                        </SubmitButton>\n                    </Row>\n                </form> */}\n            </div>\n        );\n}\n\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}