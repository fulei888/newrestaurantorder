{"ast":null,"code":"var _jsxFileName = \"/Users/leifu/Documents/GitHub/restaurantorder/src/Components/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../UI/Button/Button';\nimport Spinner from '../UI/Spinner/Spinner';\nimport classes from './ContactData.module.css'; // import axios from '../../../axios-orders';\n\nimport Input from '../UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5,\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        city: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'City'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        phone: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Phone Number'\n          },\n          value: '',\n          validation: {\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      console.log(\"orderHandler\", this.props);\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      } // const order = {\n      //     ingredients: this.props.ingredients,\n      //     price: this.props.price,\n      //     orderData: formData\n      // }\n      // axios.post( '/orders.json', order )\n      //     .then( response => {\n      //         this.setState( { loading: false } );\n      //         this.props.history.push( '/' );\n      //     } )\n      //     .catch( error => {\n      //         this.setState( { loading: false } );\n      //     } );\n\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Danger\",\n      clicked: this.props.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }, \"BACK\"), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      clicked: this.orderHandler,\n      disabled: !this.state.formIsValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, \"Enter your Contact Data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/leifu/Documents/GitHub/restaurantorder/src/Components/ContactData/ContactData.js"],"names":["React","Component","Button","Spinner","classes","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","city","phone","email","isEmail","deliveryMethod","options","displayValue","formIsValid","loading","orderHandler","event","console","log","props","preventDefault","setState","formData","formElementIdentifier","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","rules","isValid","trim","length","pattern","test","render","formElementsArray","key","push","id","config","form","map","formElement","goBack"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Button from '../UI/Button/Button'\nimport Spinner from '../UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\n// import axios from '../../../axios-orders';\nimport Input from '../UI/Input/Input';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            city: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'City'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            phone: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Phone Number'\n                },\n                value: '',\n                validation: {\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: '',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false,\n        loading: false\n    }\n    \n\n    orderHandler = ( event ) => {\n        console.log(\"orderHandler\",this.props);\n        event.preventDefault();\n        this.setState( { loading: true } );\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        // const order = {\n        //     ingredients: this.props.ingredients,\n        //     price: this.props.price,\n        //     orderData: formData\n        // }\n        // axios.post( '/orders.json', order )\n        //     .then( response => {\n        //         this.setState( { loading: false } );\n        //         this.props.history.push( '/' );\n        //     } )\n        //     .catch( error => {\n        //         this.setState( { loading: false } );\n        //     } );\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = { \n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n    \n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <div>\n            <form>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                 </form>\n                <Button btnType=\"Danger\" clicked = {this.props.goBack}>BACK</Button>\n                <Button btnType=\"Success\" clicked = {this.orderHandler} disabled={!this.state.formIsValid}>ORDER</Button>\n                </div>\n           \n        );\n        if ( this.state.loading ) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}