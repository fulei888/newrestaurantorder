{"ast":null,"code":"import React,{Suspense}from'react';import Layout from'./Components/Layout/Layout';import'./App.css';import OrderBuilder from'./Container/OrderBuilder/OrderBuilder';import{Route,Switch,withRouter,Redirect}from'react-router-dom';import EndPage from'../src/Components/EndPage/EndePage';import Orders from'../src/Components/Orders/Orders';import Auth from'../src/Container/Auth/Auth';import Logout from'../src/Container/Auth/Logout/Logout';import*as actions from'./Store/actions/index';import{connect}from'react-redux';var App=function App(props){var routes=/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{path:\"/endpage\",component:EndPage}),/*#__PURE__*/React.createElement(Route,{path:\"/auth\",component:Auth}),/*#__PURE__*/React.createElement(Route,{path:\"/\",exact:true,component:OrderBuilder}),/*#__PURE__*/React.createElement(Redirect,{to:\"/\"}));if(props.isAuthenticated){routes=/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{path:\"/orders\",component:Orders}),/*#__PURE__*/React.createElement(Route,{path:\"/auth\",component:Auth}),/*#__PURE__*/React.createElement(Route,{path:\"/endpage\",component:EndPage}),/*#__PURE__*/React.createElement(Route,{path:\"/logout\",component:Logout}),/*#__PURE__*/React.createElement(Route,{path:\"/\",exact:true,component:OrderBuilder}),/*#__PURE__*/React.createElement(Redirect,{to:\"/\"}));}return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(Layout,null,/*#__PURE__*/React.createElement(Suspense,{fallback:/*#__PURE__*/React.createElement(\"p\",null,\"Loading...\")},routes)));};var mapStateToProps=function mapStateToProps(state){return{isAuthenticated:state.token!==null};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onTryAutoSignup:function onTryAutoSignup(){return dispatch(actions.authCheckState());}};};export default withRouter(connect(mapStateToProps,mapDispatchToProps)(App));","map":{"version":3,"sources":["/Users/leifu/Documents/restaurantorder/src/App.js"],"names":["React","Suspense","Layout","OrderBuilder","Route","Switch","withRouter","Redirect","EndPage","Orders","Auth","Logout","actions","connect","App","props","routes","isAuthenticated","mapStateToProps","state","token","mapDispatchToProps","dispatch","onTryAutoSignup","authCheckState"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,MAAOC,CAAAA,MAAP,KAAmB,4BAAnB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,YAAP,KAAyB,uCAAzB,CACA,OAAQC,KAAR,CAAeC,MAAf,CAAuBC,UAAvB,CAAmCC,QAAnC,KAAkD,kBAAlD,CACA,MAAOC,CAAAA,OAAP,KAAoB,oCAApB,CACA,MAAOC,CAAAA,MAAP,KAAmB,iCAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,4BAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qCAAnB,CACA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,uBAAzB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAAAC,KAAK,CAAI,CAEnB,GAAIC,CAAAA,MAAM,cACR,oBAAC,MAAD,mBACA,oBAAC,KAAD,EAAO,IAAI,CAAC,UAAZ,CAAuB,SAAS,CAAER,OAAlC,EADA,cAEA,oBAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,CAAoB,SAAS,CAAEE,IAA/B,EAFA,cAGA,oBAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,KAAK,KAArB,CAAsB,SAAS,CAAEP,YAAjC,EAHA,cAIA,oBAAC,QAAD,EAAU,EAAE,CAAC,GAAb,EAJA,CADF,CAQA,GAAIY,KAAK,CAACE,eAAV,CAA2B,CACzBD,MAAM,cACN,oBAAC,MAAD,mBACE,oBAAC,KAAD,EAAO,IAAI,CAAC,SAAZ,CAAsB,SAAS,CAAEP,MAAjC,EADF,cAEE,oBAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,CAAoB,SAAS,CAAEC,IAA/B,EAFF,cAGE,oBAAC,KAAD,EAAO,IAAI,CAAC,UAAZ,CAAuB,SAAS,CAAEF,OAAlC,EAHF,cAIE,oBAAC,KAAD,EAAO,IAAI,CAAC,SAAZ,CAAsB,SAAS,CAAEG,MAAjC,EAJF,cAKE,oBAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,KAAK,KAArB,CAAsB,SAAS,CAAER,YAAjC,EALF,cAME,oBAAC,QAAD,EAAU,EAAE,CAAC,GAAb,EANF,CADA,CAUD,CAED,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,oBAAC,MAAD,mBACE,oBAAC,QAAD,EAAU,QAAQ,cAAE,0CAApB,EAAwCa,MAAxC,CADF,CADF,CADF,CAOD,CA9BD,CAgCA,GAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,CAAI,CAC/B,MAAO,CACLF,eAAe,CAAEE,KAAK,CAACC,KAAN,GAAgB,IAD5B,CAAP,CAGD,CAJD,CAMA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,CAAI,CACrC,MAAO,CACLC,eAAe,CAAE,iCAAMD,CAAAA,QAAQ,CAACV,OAAO,CAACY,cAAR,EAAD,CAAd,EADZ,CAAP,CAGD,CAJD,CAMA,cAAelB,CAAAA,UAAU,CACvBO,OAAO,CACLK,eADK,CAELG,kBAFK,CAAP,CAGEP,GAHF,CADuB,CAAzB","sourcesContent":["import React, {Suspense} from 'react';\nimport Layout from './Components/Layout/Layout';\nimport './App.css';\nimport OrderBuilder from './Container/OrderBuilder/OrderBuilder';\nimport {Route, Switch, withRouter, Redirect} from 'react-router-dom';\nimport EndPage from '../src/Components/EndPage/EndePage';\nimport Orders from '../src/Components/Orders/Orders';\nimport Auth from '../src/Container/Auth/Auth';\nimport Logout from '../src/Container/Auth/Logout/Logout';\nimport * as actions from './Store/actions/index';\nimport { connect } from 'react-redux';\nconst App = props => {\n\n  let routes = (\n    <Switch>\n    <Route path=\"/endpage\" component={EndPage} />\n    <Route path=\"/auth\" component={Auth} />\n    <Route path=\"/\" exact component={OrderBuilder} />\n    <Redirect to=\"/\" />\n    </Switch>\n  )\n  if (props.isAuthenticated) {\n    routes = (\n    <Switch>\n      <Route path=\"/orders\" component={Orders} />\n      <Route path=\"/auth\" component={Auth} />\n      <Route path=\"/endpage\" component={EndPage} />\n      <Route path=\"/logout\" component={Logout} />\n      <Route path=\"/\" exact component={OrderBuilder} />\n      <Redirect to=\"/\" />\n    </Switch>\n    )\n  }\n  \n  return (\n    <div className=\"App\">\n      <Layout>\n        <Suspense fallback={<p>Loading...</p>}>{routes}</Suspense>\n      </Layout>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignup: () => dispatch(actions.authCheckState())\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(App)\n);\n"]},"metadata":{},"sourceType":"module"}