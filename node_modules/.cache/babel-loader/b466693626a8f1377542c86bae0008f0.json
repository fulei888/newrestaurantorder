{"ast":null,"code":"var _jsxFileName = \"/Users/leifu/Documents/GitHub/restaurantorder/src/Container/Auth/Auth.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../Components/UI/Input/Input';\nimport Button from '../../Components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../Store/actions/index';\nimport Spinner from '../../Components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\n\nconst Auth = props => {\n  const [controls, setControls] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Mail Address'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n  const [isSignup, setIsSignup] = useState(false);\n  const {\n    authRedirectPath,\n    onSetAuthRedirectPath\n  } = props;\n  useEffect(() => {\n    if (authRedirectPath !== '/') {\n      onSetAuthRedirectPath();\n    }\n  }, [authRedirectPath, onSetAuthRedirectPath]);\n\n  const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...controls,\n      [controlName]: { ...controls[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, controls[controlName].validation),\n        touched: true\n      }\n    };\n    setControls(updatedControls);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAuth(controls.email.value, controls.password.value, isSignup);\n  };\n\n  const switchAuthModeHandler = () => {\n    setIsSignup(!isSignup);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in controls) {\n    formElementsArray.push({\n      id: key,\n      config: controls[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }));\n\n  if (props.loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 20\n      }\n    });\n  }\n\n  let errorMessage = null;\n\n  if (props.error) {\n    errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, \" \", props.error.message);\n  }\n\n  let authRedirect = null;\n\n  if (props.isAuthenticated) {\n    authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n      to: props.authRedirectPath,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 28\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, authRedirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, \"ADMIN SIGN IN\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    error: state.error,\n    isAuthenticated: state.token != null,\n    authRedirectPath: state.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/leifu/Documents/GitHub/restaurantorder/src/Container/Auth/Auth.js"],"names":["React","useState","useEffect","connect","Input","Button","classes","actions","Spinner","Redirect","Auth","props","controls","setControls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","setIsSignup","authRedirectPath","onSetAuthRedirectPath","checkValidity","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","onAuth","switchAuthModeHandler","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","state","token","mapDispatchToProps","dispatch","auth","setAuthRedirectPath"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;;AAEA,MAAMC,IAAI,GAAGC,KAAK,IAAI;AAElB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CACpC;AACIa,IAAAA,KAAK,EAAE;AACHC,MAAAA,WAAW,EAAE,OADV;AAEHC,MAAAA,aAAa,EAAE;AACXC,QAAAA,IAAI,EAAE,OADK;AAEXC,QAAAA,WAAW,EAAE;AAFF,OAFZ;AAMHC,MAAAA,KAAK,EAAE,EANJ;AAOHC,MAAAA,UAAU,EAAE;AACRC,QAAAA,QAAQ,EAAE,IADF;AAERC,QAAAA,OAAO,EAAE;AAFD,OAPT;AAWHC,MAAAA,KAAK,EAAE,KAXJ;AAYHC,MAAAA,OAAO,EAAE;AAZN,KADX;AAeIC,IAAAA,QAAQ,EAAE;AACNV,MAAAA,WAAW,EAAE,OADP;AAENC,MAAAA,aAAa,EAAE;AACXC,QAAAA,IAAI,EAAE,UADK;AAEXC,QAAAA,WAAW,EAAE;AAFF,OAFT;AAMNC,MAAAA,KAAK,EAAE,EAND;AAONC,MAAAA,UAAU,EAAE;AACRC,QAAAA,QAAQ,EAAE,IADF;AAERK,QAAAA,SAAS,EAAE;AAFH,OAPN;AAWNH,MAAAA,KAAK,EAAE,KAXD;AAYNC,MAAAA,OAAO,EAAE;AAZH;AAfd,GADoC,CAAxC;AAgCA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0B3B,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM;AAAE4B,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAA6CnB,KAAnD;AACAT,EAAAA,SAAS,CAAC,MAAI;AACV,QAAK2B,gBAAgB,KAAK,GAA1B,EAA+B;AAC3BC,MAAAA,qBAAqB;AACxB;AACJ,GAJQ,EAIN,CAACD,gBAAD,EAAmBC,qBAAnB,CAJM,CAAT;;AAMA,QAAMC,aAAa,GAAG,CAACZ,KAAD,EAAQa,KAAR,KAAkB;AACpC,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAI,CAACD,KAAL,EAAY;AACR,aAAO,IAAP;AACH;;AAED,QAAIA,KAAK,CAACX,QAAV,EAAoB;AAChBY,MAAAA,OAAO,GAAGd,KAAK,CAACe,IAAN,OAAiB,EAAjB,IAAuBD,OAAjC;AACH;;AAED,QAAID,KAAK,CAACN,SAAV,EAAqB;AACjBO,MAAAA,OAAO,GAAGd,KAAK,CAACgB,MAAN,IAAgBH,KAAK,CAACN,SAAtB,IAAmCO,OAA7C;AACH;;AAED,QAAID,KAAK,CAACI,SAAV,EAAqB;AACjBH,MAAAA,OAAO,GAAGd,KAAK,CAACgB,MAAN,IAAgBH,KAAK,CAACI,SAAtB,IAAmCH,OAA7C;AACH;;AAED,QAAID,KAAK,CAACV,OAAV,EAAmB;AACf,YAAMe,OAAO,GAAG,uIAAhB;AACAJ,MAAAA,OAAO,GAAGI,OAAO,CAACC,IAAR,CAAanB,KAAb,KAAuBc,OAAjC;AACH;;AAED,QAAID,KAAK,CAACO,SAAV,EAAqB;AACjB,YAAMF,OAAO,GAAG,OAAhB;AACAJ,MAAAA,OAAO,GAAGI,OAAO,CAACC,IAAR,CAAanB,KAAb,KAAuBc,OAAjC;AACH;;AAED,WAAOA,OAAP;AACH,GA7BD;;AA+BA,QAAMO,mBAAmB,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAwB;AAChD,UAAMC,eAAe,GAAG,EACpB,GAAG/B,QADiB;AAEpB,OAAC8B,WAAD,GAAe,EACX,GAAG9B,QAAQ,CAAC8B,WAAD,CADA;AAEXvB,QAAAA,KAAK,EAAEsB,KAAK,CAACG,MAAN,CAAazB,KAFT;AAGXI,QAAAA,KAAK,EAAEQ,aAAa,CAACU,KAAK,CAACG,MAAN,CAAazB,KAAd,EAAqBP,QAAQ,CAAC8B,WAAD,CAAR,CAAsBtB,UAA3C,CAHT;AAIXI,QAAAA,OAAO,EAAE;AAJE;AAFK,KAAxB;AASAX,IAAAA,WAAW,CAAC8B,eAAD,CAAX;AACH,GAXD;;AAaA,QAAME,aAAa,GAAIJ,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACK,cAAN;AACAnC,IAAAA,KAAK,CAACoC,MAAN,CAAanC,QAAQ,CAACE,KAAT,CAAeK,KAA5B,EAAmCP,QAAQ,CAACa,QAAT,CAAkBN,KAArD,EAA4DQ,QAA5D;AACH,GAHD;;AAKA,QAAMqB,qBAAqB,GAAG,MAAM;AAChCpB,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH,GAFD;;AAKI,QAAMsB,iBAAiB,GAAG,EAA1B;;AACA,OAAM,IAAIC,GAAV,IAAiBtC,QAAjB,EAA4B;AACxBqC,IAAAA,iBAAiB,CAACE,IAAlB,CAAwB;AACpBC,MAAAA,EAAE,EAAEF,GADgB;AAEpBG,MAAAA,MAAM,EAAEzC,QAAQ,CAACsC,GAAD;AAFI,KAAxB;AAIH;;AAED,MAAII,IAAI,GAAGL,iBAAiB,CAACM,GAAlB,CAAuBC,WAAW,iBACzC,oBAAC,KAAD;AACI,IAAA,GAAG,EAAEA,WAAW,CAACJ,EADrB;AAEI,IAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBtC,WAFpC;AAGI,IAAA,aAAa,EAAEyC,WAAW,CAACH,MAAZ,CAAmBrC,aAHtC;AAII,IAAA,KAAK,EAAEwC,WAAW,CAACH,MAAZ,CAAmBlC,KAJ9B;AAKI,IAAA,OAAO,EAAE,CAACqC,WAAW,CAACH,MAAZ,CAAmB9B,KALjC;AAMI,IAAA,cAAc,EAAEiC,WAAW,CAACH,MAAZ,CAAmBjC,UANvC;AAOI,IAAA,OAAO,EAAEoC,WAAW,CAACH,MAAZ,CAAmB7B,OAPhC;AAQI,IAAA,OAAO,EAAIiB,KAAF,IAAaD,mBAAmB,CAAEC,KAAF,EAASe,WAAW,CAACJ,EAArB,CAR7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADO,CAAX;;AAYA,MAAIzC,KAAK,CAAC8C,OAAV,EAAmB;AACfH,IAAAA,IAAI,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AACD,MAAII,YAAY,GAAG,IAAnB;;AAEA,MAAG/C,KAAK,CAACgD,KAAT,EAAgB;AACZD,IAAAA,YAAY,gBACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAK/C,KAAK,CAACgD,KAAN,CAAYC,OAAjB,CADA;AAGH;;AAED,MAAIC,YAAY,GAAG,IAAnB;;AACA,MAAIlD,KAAK,CAACmD,eAAV,EAA2B;AACvBD,IAAAA,YAAY,gBAAG,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAIlD,KAAK,CAACkB,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAf;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAEvB,OAAO,CAACI,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKmD,YADL,EAEKH,YAFL,eAGI;AAAM,IAAA,QAAQ,EAAEb,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKS,IADL,eAEI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,CAHJ,CADJ;AAaP,CAlJD;;AAmJA,MAAMS,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHP,IAAAA,OAAO,EAAEO,KAAK,CAACP,OADZ;AAEHE,IAAAA,KAAK,EAAEK,KAAK,CAACL,KAFV;AAGHG,IAAAA,eAAe,EAAEE,KAAK,CAACC,KAAN,IAAe,IAH7B;AAIHpC,IAAAA,gBAAgB,EAAEmC,KAAK,CAACnC;AAJrB,GAAP;AAMH,CAPD;;AASA,MAAMqC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHpB,IAAAA,MAAM,EAAE,CAACjC,KAAD,EAAQW,QAAR,EAAkBE,QAAlB,KAA+BwC,QAAQ,CAAC5D,OAAO,CAAC6D,IAAR,CAAatD,KAAb,EAAoBW,QAApB,EAA8BE,QAA9B,CAAD,CAD5C;AAEHG,IAAAA,qBAAqB,EAAE,MAAMqC,QAAQ,CAAC5D,OAAO,CAAC8D,mBAAR,CAA4B,GAA5B,CAAD;AAFlC,GAAP;AAIH,CALD;;AAOA,eAAelE,OAAO,CAAC4D,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CxD,IAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport Input from '../../Components/UI/Input/Input';\nimport Button from '../../Components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../Store/actions/index';\nimport Spinner from '../../Components/UI/Spinner/Spinner';\nimport {Redirect} from 'react-router-dom';\n\nconst Auth = props => {\n    \n    const [controls, setControls] = useState(\n        {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n        }\n    )\n    const [isSignup, setIsSignup] = useState(false);\n\n    const { authRedirectPath, onSetAuthRedirectPath} = props;\n    useEffect(()=>{\n        if ( authRedirectPath !== '/') {\n            onSetAuthRedirectPath();\n        }\n    }, [authRedirectPath, onSetAuthRedirectPath])\n\n    const checkValidity = (value, rules) => {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...controls,\n            [controlName]: {\n                ...controls[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, controls[controlName].validation),\n                touched: true\n            }\n        };\n        setControls(updatedControls);\n    }\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n        props.onAuth(controls.email.value, controls.password.value, isSignup);\n    }\n\n    const switchAuthModeHandler = () => {\n        setIsSignup(!isSignup)\n    }\n\n\n        const formElementsArray = [];\n        for ( let key in controls ) {\n            formElementsArray.push( {\n                id: key,\n                config: controls[key]\n            } );\n        }\n\n        let form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        if (props.loading) {\n            form = <Spinner />\n        }\n        let errorMessage = null;\n\n        if(props.error) {\n            errorMessage = (\n            <p> {props.error.message}</p>\n            )\n        }\n\n        let authRedirect = null;\n        if (props.isAuthenticated) {\n            authRedirect = <Redirect to = {props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">ADMIN SIGN IN</Button>\n                </form>\n        {/* <Button clicked = {switchAuthModeHandler} \n        btnType=\"Danger\">SWITCH TO {isSignup? \"SIGN IN\" : \"SIGN UP\"}</Button> */}\n            </div>\n        );\n    \n}\nconst mapStateToProps = state => {\n    return {\n        loading: state.loading,\n        error: state.error,\n        isAuthenticated: state.token != null,\n        authRedirectPath: state.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}