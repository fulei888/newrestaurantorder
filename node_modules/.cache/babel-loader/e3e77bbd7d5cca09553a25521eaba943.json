{"ast":null,"code":"var _jsxFileName = \"/Users/leifu/Documents/restaurantorder/src/Components/ContactData/ContactData.js\";\nimport React, { useState } from 'react';\nimport localServerAxios from \"axios\";\nimport Button from '../UI/Button/Button';\nimport Spinner from '../UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../axios-orders';\nimport Input from '../UI/Input/Input';\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\"; // import {Route} from 'react-router-dom';\n// import EndPage from '../EndPage/EndePage';\n\nconst ContactData = props => {\n  const [orderForm, setOrderForm] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Your Name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Street'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'ZIP Code'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5,\n        isNumeric: true\n      },\n      valid: false,\n      touched: false\n    },\n    city: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'City'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    phone: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Phone Number'\n      },\n      value: '',\n      validation: {\n        isNumeric: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Your E-Mail'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: 'select',\n      elementConfig: {\n        options: [{\n          value: 'fastest',\n          displayValue: 'Fastest'\n        }, {\n          value: 'cheapest',\n          displayValue: 'Cheapest'\n        }]\n      },\n      value: '',\n      validation: {},\n      valid: true\n    }\n  });\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n\n  orderHandler = event => {\n    console.log(\"orderHandler\", this.props);\n    event.preventDefault();\n    this.setState({\n      loading: true\n    });\n    const formData = {};\n\n    for (let formElementIdentifier in orderForm) {\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    }\n\n    let updateDishes = { ...this.props.dishes\n    };\n    Object.keys(updateDishes).forEach(key => (updateDishes[key] === 0 || null) && delete updateDishes[key]);\n    console.log('dishes', updateDishes);\n    const order = {\n      dishes: updateDishes,\n      price: this.props.totalPrice,\n      orderData: formData\n    };\n    axios.post('/orders.json', order).then(response => {\n      this.setState({\n        loading: false\n      });\n      this.props.history.replace('/endpage');\n      console.log('this.props.match.path' + this.props.match.path);\n    }).catch(error => {\n      this.setState({\n        loading: false\n      });\n    });\n  };\n\n  const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  };\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = { ...orderForm\n    };\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    let formIsValid = true;\n\n    for (let inputIdentifier in updatedOrderForm) {\n      console.log(updatedOrderForm[inputIdentifier], updatedOrderForm[inputIdentifier].valid);\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    console.log('formIsValid', formIsValid);\n    setOrderForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n  }; //     const CardElementContainer = styled.div`\n  //     height: 40px;\n  //     display: flex;\n  //     align-items: center;\n  //     & .StripeElement {\n  //       width: 100%;\n  //       padding: 15px;\n  //     }\n  //   `;\n  //      handleFormSubmit = async ev => {\n  //       ev.preventDefault();\n  //       const billingDetails = {\n  //         name: ev.target.name.value,\n  //         email: ev.target.email.value,\n  //         address: {\n  //           city: ev.target.city.value,\n  //           line1: ev.target.address.value,\n  //           state: ev.target.state.value,\n  //           postal_code: ev.target.zip.value\n  //         }\n  //       };\n  //     };\n\n\n  const formElementsArray = [];\n\n  for (let key in this.state.orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: this.state.orderForm[key]\n    });\n  }\n\n  let form = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }\n  }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => this.inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Danger\",\n    clicked: this.props.goBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 18\n    }\n  }, \"BACK\"), /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    clicked: this.orderHandler,\n    disabled: !formIsValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 17\n    }\n  }, \"ORDER\"));\n\n  if (this.state.loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 20\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.ContactData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 17\n    }\n  }, \"Enter your Contact Data\"), form);\n};\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/leifu/Documents/restaurantorder/src/Components/ContactData/ContactData.js"],"names":["React","useState","localServerAxios","Button","Spinner","classes","axios","Input","Row","BillingDetailsFields","SubmitButton","CheckoutError","ContactData","props","orderForm","setOrderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","city","phone","email","isEmail","deliveryMethod","options","displayValue","formIsValid","setFormIsValid","loading","setLoading","isProcessing","setIsProcessing","checkoutError","setCheckoutError","orderHandler","event","console","log","preventDefault","setState","formData","formElementIdentifier","updateDishes","dishes","Object","keys","forEach","key","order","price","totalPrice","orderData","post","then","response","history","replace","match","path","catch","error","checkValidity","rules","isValid","trim","length","pattern","test","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","formElementsArray","state","push","id","config","form","map","formElement","goBack"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport localServerAxios from \"axios\";\nimport Button from '../UI/Button/Button'\nimport Spinner from '../UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../axios-orders';\nimport Input from '../UI/Input/Input';\n\nimport Row from \"./prebuilt/Row\";\nimport BillingDetailsFields from \"./prebuilt/BillingDetailsFields\";\nimport SubmitButton from \"./prebuilt/SubmitButton\";\nimport CheckoutError from \"./prebuilt/CheckoutError\";\n// import {Route} from 'react-router-dom';\n// import EndPage from '../EndPage/EndePage';\nconst ContactData = (props) => {\n  const [orderForm, setOrderForm] = useState (\n      {\n        name: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your Name'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        street: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Street'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        zipCode: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'ZIP Code'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 5,\n                maxLength: 5,\n                isNumeric: true\n            },\n            valid: false,\n            touched: false\n        },\n        city: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'City'\n            },\n            value: '',\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        phone: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Phone Number'\n            },\n            value: '',\n            validation: {\n                isNumeric: true\n            },\n            valid: false,\n            touched: false\n        },\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'email',\n                placeholder: 'Your E-Mail'\n            },\n            value: '',\n            validation: {\n                required: true,\n                isEmail: true\n            },\n            valid: false,\n            touched: false\n        },\n        deliveryMethod: {\n            elementType: 'select',\n            elementConfig: {\n                options: [\n                    {value: 'fastest', displayValue: 'Fastest'},\n                    {value: 'cheapest', displayValue: 'Cheapest'}\n                ]\n            },\n            value: '',\n            validation: {},\n            valid: true\n        }\n    }\n  ) \n        const [formIsValid, setFormIsValid] = useState(false);\n        const [loading, setLoading] = useState(false);\n        const [isProcessing, setIsProcessing] = useState(false);\n        const [checkoutError, setCheckoutError] = useState();\n     \n\n    orderHandler = ( event ) => {\n        console.log(\"orderHandler\",this.props);\n        event.preventDefault();\n        this.setState( { loading: true } );\n        const formData = {};\n        for (let formElementIdentifier in orderForm) {\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n        }\n        let updateDishes = {...this.props.dishes};\n        Object.keys(updateDishes).forEach((key) => (updateDishes[key] === 0||null) && delete updateDishes[key]);\n        console.log('dishes', updateDishes);\n        const order = {\n            dishes: updateDishes,\n            price: this.props.totalPrice,\n            orderData: formData\n        }\n        axios.post( '/orders.json', order )\n            .then( response => {\n                this.setState( { loading: false } );\n                this.props.history.replace( '/endpage' );\n                console.log('this.props.match.path'+this.props.match.path)\n            } )\n            .catch( error => {\n                this.setState( { loading: false } );\n            } );\n    }\n\n    const checkValidity = (value, rules) => {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...orderForm\n        };\n        const updatedFormElement = { \n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            console.log(updatedOrderForm[inputIdentifier],updatedOrderForm[inputIdentifier].valid);\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        console.log('formIsValid',formIsValid);\n        setOrderForm(updatedOrderForm); \n        setFormIsValid(formIsValid);\n    }\n    \n\n//     const CardElementContainer = styled.div`\n//     height: 40px;\n//     display: flex;\n//     align-items: center;\n  \n//     & .StripeElement {\n//       width: 100%;\n//       padding: 15px;\n//     }\n//   `;\n  \n  \n\n//      handleFormSubmit = async ev => {\n//       ev.preventDefault();\n  \n//       const billingDetails = {\n//         name: ev.target.name.value,\n//         email: ev.target.email.value,\n//         address: {\n//           city: ev.target.city.value,\n//           line1: ev.target.address.value,\n//           state: ev.target.state.value,\n//           postal_code: ev.target.zip.value\n//         }\n//       };\n//     };\n  \n\n    \n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <div>\n            <form>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                 </form>\n                 <Button btnType=\"Danger\" clicked = {this.props.goBack}>BACK</Button>\n                <Button btnType=\"Success\" clicked = {this.orderHandler} disabled={!formIsValid}>ORDER</Button>\n                \n                {/* <Route\n                    path={this.props.match.path + 'endpage'}\n                    render={(props)=>(<EndPage\n                        {...props} />)} \n                /> */}\n               </div>\n           \n        );\n        if ( this.state.loading ) {\n            form = <Spinner />;\n        }\n\n        \n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n                {/* <form onSubmit={handleFormSubmit}>\n                    <Row>\n                        <BillingDetailsFields />\n                    </Row>\n                    <Row>\n                        <CardElementContainer></CardElementContainer>\n                    </Row>\n                    {checkoutError && <CheckoutError>{checkoutError}</CheckoutError>}\n                    <Row>\n                        <SubmitButton disabled={isProcessing}>\n                        {isProcessing ? \"Processing...\" : `Pay $${price}`}\n                        </SubmitButton>\n                    </Row>\n                </form> */}\n            </div>\n        );\n}\n\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}